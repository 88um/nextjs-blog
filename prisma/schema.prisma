// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MODERATOR
  USER
  ADMIN
  EDITOR
}

model User {
  id              String    @id @default(cuid())
  name            String
  username        String    @unique
  email           String    @unique
  website         String?
  location        String?
  profilePicture  String?
  backgroundImage String?
  bio             String?   @default("Hello World ‚úàÔ∏èüåè")
  hashedPassword  String
  role            Role      @default(USER)
  comments        Comment[]
  posts           Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]
}

model Post {
  id          String    @id @default(cuid())
  title       String
  description String?
  coverImage  String    @db.Text
  content     String    @db.Text 
  json        Json?
  userId      String
  pathName    String    @unique
  likedIds    String[]
  isApproved  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  tags        Tag[] //Implicit many to many 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  likedIds  String[]
  parentId  String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children Comment[] @relation("CommentToComment") // To get replies to a comment
}
